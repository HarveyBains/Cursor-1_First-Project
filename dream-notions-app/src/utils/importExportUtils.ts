import type { DreamEntry } from '../types/DreamEntry';

// Utility function to generate a client-side ID
const generateId = (): string => `${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;

export const parseImportMarkdown = (markdownText: string): DreamEntry[] => {
  const dreams: DreamEntry[] = [];
  const lines = markdownText.split('\n');
  
  let currentDreamLines: string[] = [];
  
  // Helper to parse DD/MM/YY from string
  const parseDateFromDDMMYY = (dateString: string): number | null => {
    const match = dateString.match(/^(\d{2})\/(\d{2})\/(\d{2})/);
    if (match) {
      const day = parseInt(match[1], 10);
      const month = parseInt(match[2], 10) - 1; // Month is 0-indexed
      let year = parseInt(match[3], 10);

      // Handle two-digit years
      year = year >= 70 ? 1900 + year : 2000 + year;

      const date = new Date(year, month, day);
      // Check for valid date (e.g., 31/02/2000 would be invalid)
      if (date.getDate() === day && date.getMonth() === month && date.getFullYear() === year) {
        return date.getTime();
      }
    }
    return null;
  };

  const processDreamBlock = (blockLines: string[]) => {
    console.log('Processing dream block:', blockLines);
    if (blockLines.length === 0) return;

    const firstLine = blockLines[0].trim();
    // New format: DD/MM/YY - Dream Title, Tags:Tag1,Tag2,Tag3
    const newFormatMatch = firstLine.match(/^(\d{2}\/\d{2}\/\d{2})\s*-\s*(.*?),\s*Tags:(.*)$/);

    let name = '';
    let timestamp = Date.now();
    let tags: string[] = [];
    let description = '';

    if (newFormatMatch) {
      timestamp = parseDateFromDDMMYY(newFormatMatch[1]) || Date.now();
      name = newFormatMatch[2].trim();
      tags = newFormatMatch[3].split(',').map(tag => tag.trim()).filter(tag => tag !== '');
      description = blockLines.slice(1).join('\n').trim();
      console.log('  Parsed Name:', name, 'Timestamp:', timestamp, 'Tags:', tags, 'Description length:', description.length);

      dreams.push({
        id: generateId(),
        name,
        timestamp,
        description: description || undefined,
        isFavorite: false, // Default to false for new format
        tags: tags.length > 0 ? tags : ['#default'], // Ensure at least #default tag
        icon: 'neutral', // Default icon
        displayOrder: dreams.length * 1000
      } as DreamEntry);
      console.log('  Dream pushed:', dreams[dreams.length - 1]);
    } else {
      console.log('  No new format match for line:', firstLine);
    }
  };

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    console.log('Reading line:', line);

    // Skip header/footer lines
    if (line.startsWith('# Dreams Journal Export') || line.startsWith('*Generated by')) {
      console.log('  Skipping header/footer line.');
      continue;
    }

    if (line === '---') {
      console.log('  Found separator ---. Current dream lines:', currentDreamLines);
      if (currentDreamLines.length > 0) { // Process block if it contains lines
        processDreamBlock(currentDreamLines);
        currentDreamLines = []; // Reset for next block
      }
      continue; // Skip the --- line itself
    }

    // Add line to current dream block
    currentDreamLines.push(line);
    console.log('  Added line to currentDreamLines. currentDreamLines count:', currentDreamLines.length);
  }

  // Process any remaining dream block after the loop (for the last dream)
  console.log('End of file. Remaining dream lines:', currentDreamLines);
  if (currentDreamLines.length > 0) {
    processDreamBlock(currentDreamLines);
  }
  
  return dreams;
};

export const exportDreams = async (dreams: DreamEntry[]): Promise<void> => {
  const header = '# Dreams Journal Export\n';
  const footer = `\n*Generated by Dream-Notions on ${new Date().toLocaleDateString()}*`;

  const dreamEntries = dreams.map(dream => {
    const date = new Date(dream.timestamp);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const yearShort = String(date.getFullYear()).slice(-2); // Get last two digits of year

    const formattedDateDDMMYY = `${day}/${month}/${yearShort}`;
    const tags = dream.tags && dream.tags.length > 0 ? dream.tags.join(',') : '#default'; // Ensure #default on export

    // Format: DD/MM/YY - Dream Title, Tags:Tag1,Tag2,Tag3\nDescription\n---
    return `${formattedDateDDMMYY} - ${dream.name}, Tags:${tags}\n${dream.description || ''}\n---`;
  }).join('\n');

  const markdownContent = `${header}${dreamEntries}${footer}`;

  try {
    await navigator.clipboard.writeText(markdownContent);
    alert('Dream data copied to clipboard!');
  } catch (err) {
    console.error('Failed to copy dream data to clipboard:', err);
    alert('Failed to copy dream data to clipboard. Please try again.');
  }
};